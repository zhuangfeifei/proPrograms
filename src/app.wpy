<style lang="less">
page{
  width: 100%; height: 100%; font-size: 28rpx; font-family:PingFangSC-Regular; font-weight:400; z-index: 10000;
}
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)
wepy.$store = store

const Api = require('./wxApi/api')
wepy.$Api = Api

export default class extends wepy.app {
  config = {
    pages: [
      'pages/home/index',
      'pages/home/details',
      'pages/home/classification',
      'pages/home/evaluation',
      'pages/home/label',
      'pages/home/pay',
      'pages/home/h5pay',
      'pages/home/web',
      'pages/home/weblive',
      'pages/home/giving',
      'pages/home/success',
      'pages/home/receive',
      'pages/login/login',
      'pages/login/registered',
      'pages/login/successfully',
      'pages/login/network',
      'pages/my/my',
      'pages/my/setup',
      'pages/my/topUp',
      'pages/my/successup',
      'pages/my/myCourse',
      'pages/my/businessCard',
      'pages/my/feedback',
      'pages/my/feedbackSuccess',
      'pages/my/topUpRecord',
      'pages/my/manual',
      'pages/my/watchRecord',
      'pages/my/myCoupons',
      'pages/my/myOrder',
      'pages/my/webmyLearning',
      'pages/authorization/authorization',
      'pages/authorization/agreement',
      'pages/integral/integral',
      'pages/integral/sign',
      'pages/cart/cart',
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '箴创学院',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      list: [
        {
          pagePath: 'pages/home/index',
          text: '首页',
          iconPath: 'images/home/homes.png',
          selectedIconPath: 'images/home/home.png'
        },
        {
          pagePath: 'pages/cart/cart',
          text: '购物车',
          iconPath: 'images/home/carts.png',
          selectedIconPath: 'images/home/cart.png'
        },
        {
          pagePath: 'pages/home/classification',
          text: '课程',
          iconPath: 'images/home/directorys.png',
          selectedIconPath: 'images/home/directory.png'
        },
        {
          pagePath: 'pages/my/my',
          text: '我的',
          iconPath: 'images/home/mys.png',
          selectedIconPath: 'images/home/my.png'
        }
      ],
      borderStyle: 'black',
      backgroundColor: '#ffffff',
      color: '#B8B8B8',
      selectedColor: '#FC6619'
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.autoUpdate()
    
    wepy.login({
      success: res_login => {
        // console.log('login', res_login)
        // 获取用户信息
        wepy.getSetting({
          success: res => {
            // console.log(res)
            if (res.authSetting['scope.userInfo']) {
              wepy.getUserInfo({
                success: res => {
                  // console.log('user',res)
                  wx.getSystemInfo({
                      success:(resType)=> {
                          // console.log(resType)
                          var jsonData = {
                              Code: res_login.code,
                              EncryptedData: res.encryptedData,
                              IV: res.iv,
                              NickName: res.userInfo.nickName, 
                              AvatarUrl: res.userInfo.avatarUrl,
                              Gender: res.userInfo.gender,
                              Country: res.userInfo.country,
                              Province: res.userInfo.province,
                              City: res.userInfo.city,
                              Language: res.userInfo.language,
                              MobileType: resType.model.indexOf("iPhone")==-1 ? 1 : 2
                          }
                          Api.wxregister(jsonData).then(res=>{
                            // console.log('asdas',res.data)
                            if(res.data.IsSuccess){
                                  wx.setStorage({key:'userinfo', data: res.data.Data})
                                  wepy.$store.dispatch({
                                    type: 'userinfos',
                                    payload: res.data.Data
                                  });
                            }else{
                                wx.showToast({
                                    title: res.data.Message,
                                    icon: 'none',
                                    duration: 2000
                                })
                            }
                          })
                      }

                  })
                }
              })
            } else {
              // wepy.navigateTo({
              //   url: '/pages/authorization/authorization'
              // })
            }
          }
        })
      }
    })
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      wx.getNetworkType({
          success: (res)=> {
              // this.netWorkType = res.networkType
              // console.log(res)
              resolve(res.networkType)
          }
      })
      wx.onNetworkStatusChange(function (res) {
        // console.log(res.isConnected)
        // console.log(res.networkType)
        if(res.networkType === 'none'){
          wx.redirectTo ({url:'/pages/login/network'})
        }
        // wx.showToast({
        //     title: res.networkType,
        //     icon: 'none',
        //     duration: 2000
        // })
      })
    })
  }

  async autoUpdate () {
    const networkType = await this.sleep()
    var self = this
    if(networkType === 'none'){
      // console.log(networkType)
      wx.redirectTo ({url:'/pages/login/network'})
    }else{
        // 获取小程序更新机制兼容
        if (wx.canIUse('getUpdateManager')) {
          const updateManager = wx.getUpdateManager()
          //1. 检查小程序是否有新版本发布
          updateManager.onCheckForUpdate(function(res) {
            // 请求完新版本信息的回调
            // console.log(res)
            if (res.hasUpdate) {
              //检测到新版本，需要更新，给出提示
              wx.showModal({
                title: '更新提示',
                content: '检测到新版本，是否下载新版本并重启小程序？',
                success: function(res) {
                  if (res.confirm) {
                    //2. 用户确定下载更新小程序，小程序下载及更新静默进行
                    self.downLoadAndUpdate(updateManager)
                  } else if (res.cancel) {
                    //用户点击取消按钮的处理，如果需要强制更新，则给出二次弹窗，如果不需要，则这里的代码都可以删掉了
                    wx.showModal({
                      title: '温馨提示~',
                      content: '本次版本更新涉及到新的功能添加，旧版本无法正常访问的哦~',
                      showCancel:false,//隐藏取消按钮
                      confirmText:"确定更新",//只保留确定更新按钮
                      success: function(res) {
                        if (res.confirm) {
                          //下载新版本，并重新应用
                          self.downLoadAndUpdate(updateManager)
                        }
                      }
                    })
                  }
                }
              })
            }
          })
        } else {
          // 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示
          wx.showModal({
            title: '提示',
            content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
          })
        }
    }
  }

  /**
   * 下载小程序新版本并重启应用
   */
  downLoadAndUpdate(updateManager){
    var self=this
    wx.showLoading();
    //静默下载更新小程序新版本
    updateManager.onUpdateReady(function () {
      wx.hideLoading()
      //新的版本已经下载好，调用 applyUpdate 应用新版本并重启
      updateManager.applyUpdate()
    })
    updateManager.onUpdateFailed(function () {
      // 新的版本下载失败
      wx.showModal({
        title: '已经有新版本了哟~',
        content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~',
      })
    })
  }
}
</script>
